{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:00.878157Z","iopub.execute_input":"2024-08-07T04:04:00.878619Z","iopub.status.idle":"2024-08-07T04:04:00.889865Z","shell.execute_reply.started":"2024-08-07T04:04:00.878588Z","shell.execute_reply":"2024-08-07T04:04:00.888686Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ntrain_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:00.891798Z","iopub.execute_input":"2024-08-07T04:04:00.892143Z","iopub.status.idle":"2024-08-07T04:04:00.921177Z","shell.execute_reply.started":"2024-08-07T04:04:00.892114Z","shell.execute_reply":"2024-08-07T04:04:00.920025Z"},"trusted":true},"execution_count":66,"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntest_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:00.923518Z","iopub.execute_input":"2024-08-07T04:04:00.923971Z","iopub.status.idle":"2024-08-07T04:04:00.946858Z","shell.execute_reply.started":"2024-08-07T04:04:00.923930Z","shell.execute_reply":"2024-08-07T04:04:00.945812Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print('\\nNull Values in Training \\n{}'.format(train_data.isnull().sum()))\nprint('\\nNull Values in Testing \\n{}'.format(test_data.isnull().sum()))\n\nprint('\\nDuplicated values in train {}'.format(train_data.duplicated().sum()))\nprint('Duplicated values in test {}'.format(test_data.duplicated().sum()))\n# Get the summary of the dataset\ntrain_data.info()\ntest_data.info()\ndf_train = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ndf_test = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n\ndef concat_df(train_data, test_data):\n    # Returns a concatenated df of training and test set\n    return pd.concat([train_data, test_data], sort=True).reset_index(drop=True)\n\ndf_all = concat_df(df_train, df_test)\ndf_all['Age'] = pd.qcut(df_all['Age'], 10)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:00.948070Z","iopub.execute_input":"2024-08-07T04:04:00.948393Z","iopub.status.idle":"2024-08-07T04:04:00.994917Z","shell.execute_reply.started":"2024-08-07T04:04:00.948365Z","shell.execute_reply":"2024-08-07T04:04:00.993737Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"\nNull Values in Training \nPassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\n\nNull Values in Testing \nPassengerId      0\nPclass           0\nName             0\nSex              0\nAge             86\nSibSp            0\nParch            0\nTicket           0\nFare             1\nCabin          327\nEmbarked         0\ndtype: int64\n\nDuplicated values in train 0\nDuplicated values in test 0\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  418 non-null    int64  \n 1   Pclass       418 non-null    int64  \n 2   Name         418 non-null    object \n 3   Sex          418 non-null    object \n 4   Age          332 non-null    float64\n 5   SibSp        418 non-null    int64  \n 6   Parch        418 non-null    int64  \n 7   Ticket       418 non-null    object \n 8   Fare         417 non-null    float64\n 9   Cabin        91 non-null     object \n 10  Embarked     418 non-null    object \ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"print('Embarkation per ports \\n{}'.format(train_data['Embarked'].value_counts()))\n\n# since the most common port is Southampton the chances are that the missing one is from there\ntrain_data['Embarked'].fillna(value='S')\ntest_data['Fare'].fillna(value=test_data.Fare.mean())\n\nprint('Embarkation per ports after filling \\n{}'.format(train_data['Embarked'].value_counts()))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:00.998238Z","iopub.execute_input":"2024-08-07T04:04:00.998739Z","iopub.status.idle":"2024-08-07T04:04:01.011434Z","shell.execute_reply.started":"2024-08-07T04:04:00.998697Z","shell.execute_reply":"2024-08-07T04:04:01.010024Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"Embarkation per ports \nEmbarked\nS    644\nC    168\nQ     77\nName: count, dtype: int64\nEmbarkation per ports after filling \nEmbarked\nS    644\nC    168\nQ     77\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"mean_age_miss = train_data[train_data[\"Name\"].str.contains('Miss.', na=False)]['Age'].mean().round()\nmean_age_mrs = train_data[train_data[\"Name\"].str.contains('Mrs.', na=False)]['Age'].mean().round()\nmean_age_mr = train_data[train_data[\"Name\"].str.contains('Mr.', na=False)]['Age'].mean().round()\nmean_age_master = train_data[train_data[\"Name\"].str.contains('Master.', na=False)]['Age'].mean().round()\n\nprint('Mean age of Miss. title {}'.format(mean_age_miss))\nprint('Mean age of Mrs. title {}'.format(mean_age_mrs))\nprint('Mean age of Mr. title {}'.format(mean_age_mr))\nprint('Mean age of Master. title {}'.format(mean_age_master))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:01.013187Z","iopub.execute_input":"2024-08-07T04:04:01.014909Z","iopub.status.idle":"2024-08-07T04:04:01.035602Z","shell.execute_reply.started":"2024-08-07T04:04:01.014857Z","shell.execute_reply":"2024-08-07T04:04:01.034314Z"},"trusted":true},"execution_count":70,"outputs":[{"name":"stdout","text":"Mean age of Miss. title 22.0\nMean age of Mrs. title 36.0\nMean age of Mr. title 33.0\nMean age of Master. title 5.0\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\n","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:01.037157Z","iopub.execute_input":"2024-08-07T04:04:01.037728Z","iopub.status.idle":"2024-08-07T04:04:01.043930Z","shell.execute_reply.started":"2024-08-07T04:04:01.037692Z","shell.execute_reply":"2024-08-07T04:04:01.042430Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)/len(women)\n\nprint(\"% of women who survived:\", rate_women)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:01.045513Z","iopub.execute_input":"2024-08-07T04:04:01.045918Z","iopub.status.idle":"2024-08-07T04:04:01.057946Z","shell.execute_reply.started":"2024-08-07T04:04:01.045885Z","shell.execute_reply":"2024-08-07T04:04:01.056720Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stdout","text":"% of women who survived: 0.7420382165605095\n","output_type":"stream"}]},{"cell_type":"code","source":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)/len(men)\n\nprint(\"% of men who survived:\", rate_men)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:01.059250Z","iopub.execute_input":"2024-08-07T04:04:01.059672Z","iopub.status.idle":"2024-08-07T04:04:01.072629Z","shell.execute_reply.started":"2024-08-07T04:04:01.059642Z","shell.execute_reply":"2024-08-07T04:04:01.071324Z"},"trusted":true},"execution_count":73,"outputs":[{"name":"stdout","text":"% of men who survived: 0.18890814558058924\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=500, max_depth=7, min_samples_split=4,min_samples_leaf=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\nprint(model.fit)","metadata":{"execution":{"iopub.status.busy":"2024-08-07T04:04:01.073840Z","iopub.execute_input":"2024-08-07T04:04:01.074666Z","iopub.status.idle":"2024-08-07T04:04:02.383357Z","shell.execute_reply.started":"2024-08-07T04:04:01.074633Z","shell.execute_reply":"2024-08-07T04:04:02.382145Z"},"trusted":true},"execution_count":74,"outputs":[{"name":"stdout","text":"Your submission was successfully saved!\n<bound method BaseForest.fit of RandomForestClassifier(max_depth=7, min_samples_leaf=5, min_samples_split=4,\n                       n_estimators=500, random_state=1)>\n","output_type":"stream"}]}]}